--- @author Doomsdayrs
--- @version 1.0.0

luajava = require("luajava")

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doomsdayrs.
--- DateTime: 1/16/20 9:25 PM
---
local LuaSupport = luajava.newInstance("com.github.doomsdayrs.api.shosetsu.services.core.objects.LuaSupport")
local baseURL = "https://bestlightnovel.com"

--- @return boolean
function isIncrementingChapterList()
    return false
end

--- @return boolean
function isIncrementingPassagePage()
    return false
end

--- @return Ordering java object
function chapterOrder()
    return LuaSupport:getOrdering(0)
end

--- @return Ordering java object
function latestOrder()
    return LuaSupport:getOrdering(0)
end

--- @return boolean
function hasCloudFlare()
    return false
end

--- @return boolean
function hasSearch()
    return true
end

--- @return boolean
function hasGenres()
    return false
end

function genres()
    return LuaSupport:getGAL()
end

function getID()
    return 5
end

function getName()
    return "BestLightNovel"
end

function getImageURL()
    return ""
end

function getLatestURL(page)
    i = page
    if i <= 0 then
        i = 1
    end
    return baseURL .. "/novel_list?type=latest&category=all&state=all&page=" .. i
end

function getNovelPassage(document)
    elements = document:selectFirst("div.vung_doc"):select("p")
    print(elements:size())
    if elements:size() > 0 then
        passage = ""
        for i = 0, elements:size() - 1, 1 do
            passage = passage .. elements:get(i):text() .. "\n"
        end
        return passage
    else
        return "NOT YET TRANSLATED"
    end
end

function parseNovel(document)
    novelPage = LuaSupport:getNovelPage()
    -- Image
    element = document:selectFirst("div.truyen_info_left")
    novelPage:setImageURL(element:selectFirst("img"):attr("src"))

    -- Bulk data
    element = document:selectFirst("ul.truyen_info_right")
    elements = element:select("li")
    subElement = nil
    subElements = nil

    for i = 0, elements:size() - 1, 1 do
        e = elements:get(i)
        if i == 0 then
            novelPage:setTitle(e:selectFirst("h1"):text())
        elseif i == 1 then
            strings = LuaSupport:getStringArray()
            subElements = e:select("a")
            strings:setSize(subElements:size())
            for y = 0, subElements:size() - 1, 1 do
                strings:setPosition(y, subElements:get(y):text())
            end
            novelPage:setAuthors(strings:getStrings())
        elseif i == 2 then
            strings = LuaSupport:getStringArray()
            subElements = e:select("a")
            strings:setSize(subElements:size())
            for y = 0, subElements:size() - 1, 1 do
                strings:setPosition(y, subElements:get(y):text())
            end
            novelPage:setGenres(strings:getStrings())
        elseif i == 3 then
            subElement = e:select("a")
            text = subElement:text()
            if text == "ongoing" then
                novelPage:setStatus(LuaSupport:getStatus(0))
            elseif text == "completed" then
                novelPage:setStatus(LuaSupport:getStatus(1))
            else
                novelPage:setStatus(LuaSupport:getStatus(3))
            end
        end
    end
    -- Description
    elements = document:selectFirst("div.entry-header"):select("div")
    for i = 0, elements:size() - 1, 1 do
        div = elements:get(i)
        if div:id() == "noidungm" then
            unformatted = div:text()
            unformatted = string.gsub(unformatted, "<br>", "\n")
            novelPage:setDescription(unformatted)
        end
    end
    -- Chapters
    e = document:selectFirst("div.chapter-list")
    novelPage:setNovelChapters(LuaSupport:getChapterArrayList())
    novelChapters = LuaSupport:getCAL()
    novelChapter = LuaSupport:getNovelChapter()
    chapters = e:select("div.row")
    for i = 0, chapters:size() - 1, 1 do
        row = chapters:get(i)
        novelChapter = LuaSupport:getNovelChapter()
        elements = row:select("span")
        for x = 0, elements:size() - 1, 1 do
            if x == 0 then
                titleLink = elements:get(x):selectFirst("a")
                titleAttr = titleLink:attr("title")
                pageTitle = novelPage:getTitle()
                novelChapter:setTitle(string.gsub(titleAttr, pageTitle, ""):match("^%s*(.-)%s*$"))
                novelChapter:setLink(titleLink:attr("href"))
            elseif x == 1 then
                novelChapter:setRelease(elements:get(x):text())
            end
        end
        novelChapter:setOrder(y)
        novelChapters:add(novelChapter)
    end
    novelChapters = LuaSupport:reverseAL(novelChapters)
    novelPage:setNovelChapters(novelChapters)
    return novelPage
end

function parseNovelI(document, increment)
    return parseNovel(document)
end

function novelPageCombiner(url, increment)
    return ""
end

function parseLatest(document)
    novels = LuaSupport:getNAL()
    elements = document:select("div.update_item.list_category")
    for i = 1, elements:size() - 1, 1 do
        element = elements:get(i)
        novel = LuaSupport:getNovel()
        e = element:selectFirst("h3.nowrap"):selectFirst("a")
        novel:setTitle(e:attr("title"))
        novel:setLink(e:attr("href"))
        novel:setImageURL(element:selectFirst("img"):attr("src"))
        novels:add(novel)
    end
    return novels
end

function parseSearch(document)
    novels = LuaSupport:getNAL()
    elements = document:select("div.update_item.list_category")
    for i = 1, elements:size() - 1, 1 do
        element = elements:get(i)
        novel = LuaSupport:getNovel()
        e = element:selectFirst("h3.nowrap"):selectFirst("a")
        novel:setTitle(e:attr("title"))
        novel:setLink(e:attr("href"))
        novel:setImageURL(element:selectFirst("img"):attr("src"))
        novels:add(novel)
    end
    return novels
end

function getSearchString(query)
    return baseURL .. "/search_novels/" .. string.gsub(query, " ", "_")
end

