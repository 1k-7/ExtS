package com.github.doomsdayrs.api.shosetsu.extensions.lang.en

import com.github.doomsdayrs.api.shosetsu.services.core.dep.LuaFormatter
import com.github.doomsdayrs.api.shosetsu.services.core.objects.LuaSupport
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.ResponseBody
import org.jsoup.Jsoup
import org.jsoup.nodes.Document
import org.luaj.vm2.LuaValue
import org.luaj.vm2.lib.jse.CoerceJavaToLua
import org.luaj.vm2.lib.jse.JsePlatform
import java.io.IOException
import java.net.URL
import java.util.concurrent.TimeUnit


/*
 * This file is part of shosetsu-extensions.
 * shosetsu-extensions is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * shosetsu-extensions is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with shosetsu-extensions.  If not, see https://www.gnu.org/licenses/.
 * ====================================================================
 */
/**
 * novelreader-extensions
 * 03 / June / 2019
 *
 * @author github.com/doomsdayrs
 */
internal class Test {

    companion object {
        // The below is methods robbed from ScrapeFormat class
        private val builder: Request.Builder = Request.Builder()
        private val client: OkHttpClient = OkHttpClient()

        @Throws(IOException::class)
        private fun request(url: String?): ResponseBody? {
            println(url)
            val u = URL(url)
            val request = builder.url(u).build()
            return client.newCall(request).execute().body()
        }

        @Throws(IOException::class)
        private fun docFromURL(URL: String): Document {
            return Jsoup.parse(request(URL)!!.string())
        }

        @Throws(IOException::class, InterruptedException::class)
        @JvmStatic
        fun main(args: Array<String>) {
            val formatters = arrayOf(
                    "-- {\"id\":5,\"version\":\"1.1.0\",\"author\":\"Doomsdayrs\",\"repo\":\"\"}\n--- @author Doomsdayrs\n--- @version 1.1.0\n\nlocal luajava = require(\"luajava\")\n\n--local LuaSupport = luajava.newInstance(\"com.github.doomsdayrs.api.shosetsu.services.core.objects.LuaSupport\")\nlocal baseURL = \"https://bestlightnovel.com\"\n\n--- @return boolean\nfunction isIncrementingChapterList()\n    return false\nend\n\n--- @return boolean\nfunction isIncrementingPassagePage()\n    return false\nend\n\n--- @return Ordering\nfunction chapterOrder()\n    return LuaSupport:getOrdering(0)\nend\n\n--- @return Ordering\nfunction latestOrder()\n    return LuaSupport:getOrdering(0)\nend\n\n--- @return boolean\nfunction hasCloudFlare()\n    return false\nend\n\n--- @return boolean\nfunction hasSearch()\n    return true\nend\n\n--- @return boolean\nfunction hasGenres()\n    return false\nend\n\n---@return ArrayList\nfunction genres()\n    return LuaSupport:getGAL()\nend\n\n---@return int\nfunction getID()\n    return 5\nend\n\n---@return string\nfunction getName()\n    return \"BestLightNovel\"\nend\n\n---@return string\nfunction getImageURL()\n    return \"\"\nend\n\n---@return string\nfunction getLatestURL(page)\n    return baseURL .. \"/novel_list?type=latest&category=all&state=all&page=\" .. (page <= 0 and 1 or page)\nend\n\n---@return string\nfunction getNovelPassage(document)\n    local elements = document:selectFirst(\"div.vung_doc\"):select(\"p\")\n    print(elements:size())\n    if elements:size() > 0 then\n        local t = {}\n        for i=1, elements:size(), 1 do\n            t[i] = elements:get(i-1):text()\n        end\n        return table.concat(t, \"\\n\")\n    else\n        return \"NOT YET TRANSLATED\"\n    end\nend\n\n---@return Novel\nfunction parseNovel(document)\n    local novelPage = LuaSupport:getNovelPage()\n    -- Image\n    novelPage:setImageURL(document:selectFirst(\"div.truyen_info_left\"):selectFirst(\"img\"):attr(\"src\"))\n\n    -- Bulk data\n    local elements = document:selectFirst(\"ul.truyen_info_right\"):select(\"li\")\n    novelPage:setTitle(elements:get(0):selectFirst(\"h1\"):text())\n    \n    -- Authors\n    do\n        local strings = LuaSupport:getStringArray()\n        local subElements = elements:get(1):select(\"a\")\n        strings:setSize(subElements:size())\n        for y = 0, subElements:size() - 1, 1 do\n            strings:setPosition(y, subElements:get(y):text())\n        end\n        novelPage:setAuthors(strings:getStrings())\n    end\n\n    -- Genres\n    do\n        local strings = LuaSupport:getStringArray()\n        local subElements = elements:get(2):select(\"a\")\n        strings:setSize(subElements:size())\n        for y = 0, subElements:size() - 1, 1 do\n            strings:setPosition(y, subElements:get(y):text())\n        end\n        novelPage:setGenres(strings:getStrings())\n    end\n\n    -- Status\n    do\n        local s = elements:get(3):select(\"a\"):text()\n        novelPage:setStatus(LuaSupport:getStatus(\n            s == \"ongoing\" and 0 or\n                (s == \"completed\" and 1 or 3)\n        ))\n    end\n\n    -- Description\n    local elements = document:selectFirst(\"div.entry-header\"):select(\"div\")\n    for i = 0, elements:size() - 1, 1 do\n        local div = elements:get(i)\n        if div:id() == \"noidungm\" then\n            novelPage:setDescription(div:text():gsub(\"<br>\", \"\\n\"))\n        break end\n    end\n\n\n    -- Chapters\n    novelPage:setNovelChapters(LuaSupport:getChapterArrayList())\n    local novelChapters = LuaSupport:getCAL()\n    local chapters = document:selectFirst(\"div.chapter-list\"):select(\"div.row\")\n    local a = chapters:size()\n    for i = 0, chapters:size() - 1, 1 do\n        local novelChapter = LuaSupport:getNovelChapter()\n        local elements = chapters:get(i):select(\"span\")\n        local titleLink = elements:get(0):selectFirst(\"a\")\n        novelChapter:setTitle(titleLink:attr(\"title\"):gsub(novelPage:getTitle(), \"\"):match(\"^%s*(.-)%s*$\"))\n        novelChapter:setLink(titleLink:attr(\"href\"))\n        novelChapter:setRelease(elements:get(1):text())\n        novelChapter:setOrder(a-i)\n        novelChapters:add(novelChapter)\n    end\n    novelChapters = LuaSupport:reverseAL(novelChapters)\n    novelPage:setNovelChapters(novelChapters)\n    return novelPage\nend\n\nfunction parseNovelI(document, increment)\n    return parseNovel(document)\nend\n\nfunction novelPageCombiner(url, increment)\n    return url\nend\n\nfunction parseLatest(document)\n    local novels = LuaSupport:getNAL()\n    local elements = document:select(\"div.update_item.list_category\")\n    for i = 1, elements:size() - 1, 1 do\n        local element = elements:get(i)\n        local novel = LuaSupport:getNovel()\n        local e = element:selectFirst(\"h3.nowrap\"):selectFirst(\"a\")\n        novel:setTitle(e:attr(\"title\"))\n        novel:setLink(e:attr(\"href\"))\n        novel:setImageURL(element:selectFirst(\"img\"):attr(\"src\"))\n        novels:add(novel)\n    end\n    return novels\nend\n\nfunction parseSearch(document)\n    local novels = LuaSupport:getNAL()\n    local elements = document:select(\"div.update_item.list_category\")\n    for i = 1, elements:size() - 1, 1 do\n        local element = elements:get(i)\n        local novel = LuaSupport:getNovel()\n        local e = element:selectFirst(\"h3.nowrap\"):selectFirst(\"a\")\n        novel:setTitle(e:attr(\"title\"))\n        novel:setLink(e:attr(\"href\"))\n        novel:setImageURL(element:selectFirst(\"img\"):attr(\"src\"))\n        novels:add(novel)\n    end\n    return novels\nend\n\nfunction getSearchString(query)\n    return baseURL .. \"/search_novels/\" .. query:gsub(\" \", \"_\")\nend\n\n",
                    "-- {\"id\":2,\"version\":\"1.1.0\",\"author\":\"Doomsdayrs\",\"repo\":\"\"}\n--- @author Doomsdayrs\n--- @version 1.1.0\n\nlocal luajava = require(\"luajava\")\n\n--local LuaSupport = luajava.newInstance(\"com.github.doomsdayrs.api.shosetsu.services.core.objects.LuaSupport\")\nlocal baseURL = \"https://boxnovel.com\"\n\n--- @return boolean\nfunction isIncrementingChapterList()\n    return false\nend\n\n--- @return boolean\nfunction isIncrementingPassagePage()\n    return false\nend\n\n--- @return Ordering\nfunction chapterOrder()\n    return LuaSupport:getOrdering(0)\nend\n\n--- @return Ordering\nfunction latestOrder()\n    return LuaSupport:getOrdering(0)\nend\n\n--- @return boolean\nfunction hasCloudFlare()\n    return false\nend\n\n--- @return boolean\nfunction hasSearch()\n    return true\nend\n\n--- @return boolean\nfunction hasGenres()\n    return false\nend\n\n--- @return Array @Array<NovelGenre>\nfunction genres()\n    return LuaSupport:getGAL()\nend\n\n--- @return number @ID\nfunction getID()\n    return 2\nend\n\n--- @return string @name of site\nfunction getName()\n    return \"BoxNovel\"\nend\n\n--- @return string @image url of site\nfunction getImageURL()\n    return \"https://boxnovel.com/wp-content/uploads/2018/04/BoxNovel-1.png\"\nend\n\n--- @param page number @value\n--- @return string @url of said latest page\nfunction getLatestURL(page)\n    return baseURL .. \"/novel/page/\" .. page .. \"/?m_orderby=latest\"\nend\n\n--- @param document Document @Jsoup document of the page with chapter text on it\n--- @return string @passage of chapter, If nothing can be parsed, then the text should be describing of why there isn't a chapter\nfunction getNovelPassage(document)\n    local paragraphs = document:select(\"div.text-left\"):select(\"p\")\n    local t = {}\n    for i=1, paragraphs:size(), 1 do\n        t[i] = paragraphs:get(i-1):text()\n    end\n    return table.concat(t, \"\\n\"):gsub(\"</?p>\", \"\")\nend\n\n--- @param document Document @Jsoup document of the novel information page\n--- @return NovelPage @java object\nfunction parseNovel(document)\n    local novelPage = LuaSupport:getNovelPage()\n    novelPage:setImageURL(document:selectFirst(\"div.summary_image\"):selectFirst(\"img.img-responsive\"):attr(\"src\"))\n    novelPage:setTitle(document:selectFirst(\"h3\"):text())\n    novelPage:setDescription(document:selectFirst(\"p\"):text())\n\n    -- Info\n    do\n        local elements = document:selectFirst(\"div.post-content\"):select(\"div.post-content_item\")\n\n        -- authors\n        do\n            local authorE = elements:get(3):select(\"a\")\n            local authors = LuaSupport:getStringArray()\n            authors:setSize(authorE:size())\n            for y = 0, authorE:size() - 1, 1 do\n                authors:setPosition(y, authorE:get(y):text())\n            end\n            novelPage:setAuthors(authors:getStrings())\n        end\n        -- artists\n        do\n            local artistE = elements:get(4):select(\"a\")\n            local artists = LuaSupport:getStringArray()\n            artists:setSize(artistE:size())\n            for y = 0, artistE:size() - 1, 1 do\n                artists:setPosition(y, artistE:get(y):text())\n            end\n            novelPage:setArtists(artists:getStrings())\n        end\n        -- genres\n        do\n            local genreE = elements:get(5):select(\"a\")\n            local genres = LuaSupport:getStringArray()\n            genres:setSize(genreE:size())\n            for y = 0, genreE:size() - 1, 1 do\n                genres:setPosition(y, genreE:get(y):text())\n            end\n            novelPage:setArtists(genres:getStrings())\n        end\n\n        -- sorry for this extremely long line\n        novelPage:setStatus(LuaSupport:getStatus((\n            document:selectFirst(\"div.post-status\"):select(\"div.post-content_item\"):get(1)\n                :select(\"div.summary-content\"):text() == \"OnGoing\") and 0 or 1))\n    end\n\n    -- Chapters\n    do\n        local novelChapters = LuaSupport:getCAL()\n        local elements = document:select(\"li.wp-manga-chapter\")\n        local a = elements:size()\n        for i=0, a-1 do\n            local element = elements:get(i)\n            local novelChapter = LuaSupport:getNovelChapter()\n            novelChapter:setLink(element:selectFirst(\"a\"):attr(\"href\"))\n            novelChapter:setTitle(element:selectFirst(\"a\"):text())\n            novelChapter:setRelease(element:selectFirst(\"i\"):text())\n            novelChapter:setOrder(a - i)\n            novelChapters:add(novelChapter)\n        end\n        novelChapters = LuaSupport:reverseAL(novelChapters)\n        novelPage:setNovelChapters(novelChapters)\n    end\n\n    return novelPage\nend\n\n--- @param document Document @Jsoup document of the novel information page\n--- @param increment number @Page #\n--- @return NovelPage @java object\nfunction parseNovelI(document, increment)\n    print(\"Lua: Passing novel\")\n    return parseNovel(document)\nend\n\n--- @param url string @url of novel page\n--- @param increment number @which page\nfunction novelPageCombiner(url, increment)\n    return url\nend\n\nlocal function parseNovelList(doc, sel)\n    local novels = LuaSupport:getNAL()\n    local novelsHTML = doc:select(sel)\n    for i = 0, novelsHTML:size() - 1, 1 do\n        local novel = LuaSupport:getNovel()\n        local data = novelsHTML:get(i):selectFirst(\"a\")\n        novel:setTitle(data:attr(\"title\"))\n        novel:setLink(data:attr(\"href\"))\n        novel:setImageURL(data:selectFirst(\"img\"):attr(\"src\"))\n        novels:add(novel)\n    end\n    return novels\nend\n\n--- @param document Document @Jsoup document of latest listing\n--- @return Array @Novel array list\nfunction parseLatest(document)\n    return parseNovelList(document, \"div.col-xs-12.col-md-6\")\nend\n\n--- @param document Document @Jsoup document of search results\n--- @return Array @Novel array list\nfunction parseSearch(document)\n    return parseNovelList(document, \"div.c-tabs-item__content\")\nend\n\n--- @param query string @query to use\n--- @return string @url\nfunction getSearchString(query)\n    return baseURL .. \"/?s=\" .. query:gsub(\"%+\", \"%2\"):gsub(\" \", \"+\") .. \"&post_type=wp-manga\"\nend\n\n",
                    "-- {\"id\":1,\"version\":\"1.1.0\",\"author\":\"Doomsdayrs\",\"repo\":\"\"}\n--- @author Doomsdayrs\n--- @version 1.1.0\n\nlocal luajava = require(\"luajava\")\n\n--local LuaSupport = luajava.newInstance(\"com.github.doomsdayrs.api.shosetsu.services.core.objects.LuaSupport\")\nlocal baseURL = \"http://novelfull.com\"\n\nlocal function isempty(s)\n    return s == '' or not s\nend\n\nfunction stripListing(elements, novel)\n    local col = elements:get(0)\n    local image = col:selectFirst(\"img\")\n    if image then\n        novel:setImageURL(baseURL .. image:attr(\"src\"))\n    end\n\n    local header = col:selectFirst(\"h3\")\n    if header then\n        local titleLink = header:selectFirst(\"a\")\n        novel:setTitle(titleLink:attr(\"title\"))\n        novel:setLink(baseURL .. titleLink:attr(\"href\"))\n    end\n\n    return novel\nend\n\n--- @return boolean\nfunction isIncrementingChapterList()\n    return true\nend\n\n--- @return boolean\nfunction isIncrementingPassagePage()\n    return false\nend\n\n--- @return Ordering\nfunction chapterOrder()\n    return LuaSupport:getOrdering(0)\nend\n\n--- @return Ordering\nfunction latestOrder()\n    return LuaSupport:getOrdering(0)\nend\n\n--- @return boolean\nfunction hasCloudFlare()\n    return false\nend\n\n--- @return boolean\nfunction hasSearch()\n    return true\nend\n\n--- @return boolean\nfunction hasGenres()\n    return true\nend\n\n--- @return Array @Array<NovelGenre>\nfunction genres()\n    -- TODO Complete\n    return LuaSupport:getGAL()\nend\n\n--- @return number @ID\nfunction getID()\n    return 1\nend\n\n--- @return string @name of site\nfunction getName()\n    return \"NovelFull\"\nend\n\n--- @return string @image url of site\nfunction getImageURL()\n    return \"\"\nend\n\n--- @param page number @value\n--- @return string @url of said latest page\nfunction getLatestURL(page)\n    print(baseURL, page)\n    return baseURL .. \"/latest-release-novel?page=\" .. page\nend\n\n--- @param document Document @Jsoup document of the page with chapter text on it\n--- @return string @passage of chapter, If nothing can be parsed, then the text should be describing of why there isn't a chapter\nfunction getNovelPassage(document)\n    local paragraphs = document:select(\"div.chapter-c\"):select(\"p\")\n    local t = {}\n    for i=1, paragraphs:size(), 1 do\n        t[i] = paragraphs:get(i-1):text()\n    end\n    return table.concat(t, \"\\n\")\nend\n\n--- @param document Document @Jsoup document of the novel information page\n--- @return NovelPage\nfunction parseNovel(document)\n    return parseNovelI(document, 1)\nend\n\n--- @param document Document @Jsoup document of the novel information page\n--- @param increment number @Page #\n--- @return NovelPage\nfunction parseNovelI(document, increment)\n    local novelPage = LuaSupport:getNovelPage()\n    novelPage:setImageURL(baseURL .. document:selectFirst(\"div.book\"):selectFirst(\"img\"):attr(\"src\"))\n    \n    -- max page\n    do\n        local lastPageURL = document:selectFirst(\"ul.pagination.pagination-sm\"):selectFirst(\"li.last\"):select(\"a\"):attr(\"href\")\n        print(\"Lua: LastPageURL \", lastPageURL)\n        novelPage:setMaxChapterPage(lastPageURL ~= \"\"\n                and tonumber(lastPageURL:match(\"?page=(.+)&per-page=\"))\n                or increment)\n    end\n\n    -- description\n    do\n        local titleDescription = document:selectFirst(\"div.col-xs-12.col-sm-8.col-md-8.desc\")\n        novelPage:setTitle(titleDescription:selectFirst(\"h3\"):text())\n        local desc = titleDescription:selectFirst(\"div.desc-text\"):select(\"p\")\n        \n        local t = {}\n        for i=1, desc:size() do\n            t[i] = desc:get(i-1):text()\n        end\n        novelPage:setDescription(table.concat(t, \"\\n\"))\n    end\n\n    -- set information\n    do\n        local elements = document:selectFirst(\"div.info\"):select(\"div.info\"):select(\"div\")\n        do\n            local authorE = elements:get(1):select(\"a\")\n            local authors = LuaSupport:getStringArray()\n            authors:setSize(authorE:size())\n            for i = 0, authorE:size() - 1, 1 do\n                authors:setPosition(i, authorE:get(i):text())\n            end\n            novelPage:setAuthors(authors:getStrings())\n        end\n        do\n            local genreE = elements:get(2):select(\"a\")\n            local genres = LuaSupport:getStringArray()\n            genres:setSize(genreE:size())\n            for i = 0, genreE:size() - 1, 1 do\n                genres:setPosition(i, genreE:get(i):text())\n            end\n            novelPage:setGenres(genres:getStrings())\n        end\n\n        novelPage:setStatus(LuaSupport:getStatus(\n            elements:get(4):select(\"a\"):text() == \"Completed\" and 1 or 0\n        ))\n    end\n\n    -- formats chapters\n    do\n        local novelChapters = LuaSupport:getCAL()\n        local lists = document:select(\"ul.list-chapter\")\n        local a = (increment > 1) and (increment - 1) * 50 or 0\n\n        for i = 0, lists:size() - 1, 1 do\n            local chapters = lists:get(i):select(\"li\")\n            for y = 0, chapters:size() - 1, 1 do\n                local novelChapter = LuaSupport:getNovelChapter()\n                local chapterData = chapters:get(y):selectFirst(\"a\")\n                local link = chapterData:attr(\"href\")\n                if link then\n                    novelChapter:setLink(baseURL .. link)\n                end\n                novelChapter:setTitle(chapterData:attr(\"title\"))\n                novelChapter:setOrder(a)\n                a = a + 1\n                novelChapters:add(novelChapter)\n            end\n        end\n        novelPage:setNovelChapters(novelChapters)\n    end\n\n    return novelPage\nend\n\n--- @param url string @url of novel page\n--- @param increment number @which page\nfunction novelPageCombiner(url, increment)\n    return (increment > 1 and (url .. \"?page=\" .. increment) or url)\nend\n\n--- @param document Document @Jsoup document of latest listing\n--- @return Array @Novel array list\nfunction parseLatest(document)\n    local novels = LuaSupport:getNAL()\n    local listP = document:select(\"div.container\")\n    for i = 0, listP:size() - 1, 1 do\n        local list = listP:get(i)\n        if list:id() == \"list-page\" then\n            local queries = list:select(\"div.row\")\n            for j = 0, queries:size() - 1, 1 do\n                novels:add(stripListing(queries:get(j):select(\"div\"), LuaSupport:getNovel()))\n            end\n        end\n    end\n    return novels\nend\n\n--- @param document Document @Jsoup document of search results\n--- @return Array @Novel array list\nfunction parseSearch(document)\n    local novels = LuaSupport:getNAL()\n    local listP = document:select(\"div.container\")\n    for i = 0, listP:size() - 1, 1 do\n        local list = listP:get(i)\n        if list:id() == \"list-page\" then\n            local queries = list:select(\"div.row\")\n            for x = 0, queries:size() - 1, 1 do\n                novels:add(stripListing(queries:get(x):select(\"div\"), LuaSupport:getNovel()))\n            end\n        end\n    end\n    return novels\nend\n\n--- @param query string @query to use\n--- @return string @url\nfunction getSearchString(query)\n    return baseURL .. \"/search?keyword=\" .. query:gsub(\" \", \"%20\")\nend\n\n",
                    "-- {\"id\":3,\"version\":\"1.1.0\",\"author\":\"Doomsdayrs\",\"repo\":\"\"}\n--- @author Doomsdayrs\n--- @version 1.1.0\n\nlocal luajava = require(\"luajava\")\n\n--local LuaSupport = luajava.newInstance(\"com.github.doomsdayrs.api.shosetsu.services.core.objects.LuaSupport\")\nlocal baseURL = \"https://yomou.syosetu.com\"\nlocal passageURL = \"https://ncode.syosetu.com\"\n\n--- @return boolean\nfunction isIncrementingChapterList()\n    return false\nend\n\n--- @return boolean\nfunction isIncrementingPassagePage()\n    return false\nend\n\n--- @return Ordering\nfunction chapterOrder()\n    return LuaSupport:getOrdering(0)\nend\n\n--- @return Ordering\nfunction latestOrder()\n    return LuaSupport:getOrdering(0)\nend\n\n--- @return boolean\nfunction hasCloudFlare()\n    return false\nend\n\n--- @return boolean\nfunction hasSearch()\n    return true\nend\n\n--- @return boolean\nfunction hasGenres()\n    return false\nend\n\n--- @return Array @Array<NovelGenre>\nfunction genres()\n    return LuaSupport:getGAL()\nend\n\n--- @return number @ID\nfunction getID()\n    return 3\nend\n\n--- @return string @name of site\nfunction getName()\n    return \"Syosetu\"\nend\n\n--- @return string @image url of site\nfunction getImageURL()\n    return \"https://static.syosetu.com/view/images/common/logo_yomou.png\"\nend\n\n--- @param page number @value\n--- @return string @url of said latest page\nfunction getLatestURL(page)\n    if page == 0 then page = 1 end\n    return baseURL .. \"/search.php?&search_type=novel&order_former=search&order=new&notnizi=1&p=\" .. page\nend\n\n--- @param document Document @Jsoup document of the page with chapter text on it\n--- @return string @passage of chapter, If nothing can be parsed, then the text should be describing of why there isn't a chapter\nfunction getNovelPassage(document)\n    local elements = document:select(\"div\")\n    local elem\n    for i=0, elements:size()-1 do\n        if elements:get(i):id() == \"novel_contents\" then\n            elem = elements:get(i):select(\"p\")\n            break\n        end\n    end\n    if not elem then\n        return \"INVALID PARSING, CONTACT DEVELOPERS\"\n    end\n\n    local t = {}\n    for i=1, elem:size(), 1 do\n        t[i] = elem:get(i-1):text()\n    end\n    return table.concat(t, \"\\n\"):gsub(\"<br>\", \"\\n\\n\")\nend\n\n--- @param document Document @Jsoup document of the novel information page\n--- @return NovelPage @java object\nfunction parseNovel(document)\n    local novelPage = LuaSupport:getNovelPage()\n\n    do\n        local authors = LuaSupport:getStringArray()\n        authors:setSize(1)\n        authors:setPosition(0, document:selectFirst(\"div.novel_writername\"):text():gsub(\"作者：\", \"\"))\n        novelPage:setAuthors(authors:getStrings())\n        novelPage:setTitle(document:selectFirst(\"p.novel_title\"):text())\n    end\n\n    -- Description\n    do\n        local elements = document:select(\"div\")\n        local elem\n        for i=0, elements:size()-1 do\n            if elements:get(i):id() == \"novel_color\" then\n                elem = elements:get(i)\n                break\n            end\n        end\n\n        if elem then\n            novelPage:setDescription(elem:text():gsub(\"<br>\\n<br>\", \"\\n\"):gsub(\"<br>\", \"\\n\"))\n        end\n    end\n\n    -- Chapters\n    do\n        local novelChapters = LuaSupport:getCAL()\n        local elements = document:select(\"dl.novel_sublist2\")\n        for i = 0, elements:size() - 1, 1 do\n            local element = elements:get(i)\n            local novelChapter = LuaSupport:getNovelChapter()\n            novelChapter:setTitle(element:selectFirst(\"a\"):text())\n            novelChapter:setLink(passageURL .. element:selectFirst(\"a\"):attr(\"href\"))\n            novelChapter:setRelease(element:selectFirst(\"dt.long_update\"):text())\n            novelChapter:setOrder(i+1)\n            novelChapters:add(novelChapter)\n        end\n        novelPage:setNovelChapters(novelChapters)\n    end\n\n    return novelPage\nend\n\n--- @param document Document @Jsoup document of the novel information page\n--- @param increment number @Page #\n--- @return NovelPage @java object\nfunction parseNovelI(document, increment)\n    return parseNovel(document)\nend\n\n\n--- @param url string       url of novel page\n--- @param increment number which page\nfunction novelPageCombiner(url, increment)\n    return url\nend\n\n--- @param document Document @Jsoup document of latest listing\n--- @return Array @Novel array list\nfunction parseLatest(document)\n    local novels = LuaSupport:getNAL()\n    local elements = document:select(\"div.searchkekka_box\")\n    for i = 0, elements:size() - 1, 1 do\n        local novel = LuaSupport:getNovel()\n        local e = elements:get(i):selectFirst(\"div.novel_h\"):selectFirst(\"a.tl\")\n        novel:setLink(e:attr(\"href\"))\n        novel:setTitle(e:text())\n        novels:add(novel)\n    end\n    return novels\nend\n\n--- @param document Document @Jsoup document of search results\n--- @return Array @Novel array list\nfunction parseSearch(document)\n    local novels = LuaSupport:getNAL()\n    local elements = document:select(\"div.searchkekka_box\")\n    for i = 0, elements:size() - 1, 1 do\n        local novel = LuaSupport:getNovel()\n        local e = elements:get(i):selectFirst(\"div.novel_h\"):selectFirst(\"a.tl\")\n        novel:setLink(e:attr(\"href\"))\n        novel:setTitle(e:text())\n        novels:add(novel)\n    end\n    return novels\nend\n\n--- @param query string @query to use\n--- @return string @url\nfunction getSearchString(query)\n    return baseURL .. \"/search.php?&word=\" .. query:gsub(\"%+\", \"%2\"):gsub(\" \", \"\\\\+\")\nend\n\n"
                    )
            for (format in formatters){
                println("========== $format ==========")
                val globals: LuaValue = JsePlatform.debugGlobals();
                globals.get("dofile").call(LuaValue.valueOf(format));
                globals.checkglobals().STDOUT = System.out
                val support = LuaSupport()
                globals.checkglobals().set("LuaSupport", CoerceJavaToLua.coerce(support))

                val luaFormatter = LuaFormatter(globals)

                // Data
                println(luaFormatter.genres)
                println(luaFormatter.name)
                println(luaFormatter.formatterID)
                println(luaFormatter.imageURL)

                // Latest
                TimeUnit.SECONDS.sleep(1)
                val list = luaFormatter.parseLatest(docFromURL(luaFormatter.getLatestURL(1)))
                println()

                // Search
                TimeUnit.SECONDS.sleep(1)
                println(luaFormatter.parseSearch(docFromURL(luaFormatter.getSearchString("reinca"))))
                println()

                // Novel
                TimeUnit.SECONDS.sleep(1)
                val novel = luaFormatter.parseNovel(docFromURL(luaFormatter.novelPageCombiner(list[0].link,2)),2)
                println(novel)

                // Parse novel passage
                TimeUnit.SECONDS.sleep(1)
                println(luaFormatter.getNovelPassage(docFromURL(novel.novelChapters[0].link)))
                println()

                println("DEBUG")
                LuaSupport.printBuffer()
            }

        }
    }
}